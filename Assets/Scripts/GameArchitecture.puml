@startuml HockeyGameArchitecture

package "Core" {
  class GameManager {
    - _stageManager: StageManager
    - _playerManager: PlayerManager
    - _uiManager: UIManager
    - _scoreManager: ScoreManager
    - _timeManager: TimeManager
    - _audioManager: AudioManager
    + Initialize()
    + StartGame()
    + PauseGame()
    + ResumeGame()
    + EndGame()
    + Update()
  }

  class StageManager {
    - _currentStage: Stage
    - _objectPool: ObjectPool
    + Initialize()
    + LoadStage(stageId: int)
    + SpawnObjects()
    + CleanupStage()
    + GenerateStage()  ' ステージを生成する
    + DisplayStage()   ' ステージを表示する
  }

  class PlayerManager {
    - _player: Player
    + Initialize()
    + CreatePlayer()
    + SetInitialPlayerPosition(position: Vector3) ' プレイヤーの初期位置を設定する
    + UpdatePlayerState()
    + HandlePlayerGrowth()
  }

  class ScoreManager {
    - _currentScore: int
    - _highScore: int
    + AddPoints(points: int)
    + GetCurrentScore(): int
    + ResetScore()
    + CheckGrowthThreshold(): bool
  }

  class TimeManager {
    - _gameTime: float
    - _isRunning: bool
    + StartTimer()
    + StopTimer()
    + GetRemainingTime(): float
    + IsTimeUp(): bool
  }

  class UIManager {
    - _gameHUDView: GameHUDView
    - _mainMenuView: MainMenuView
    - _pauseMenuView: PauseMenuView
    - _gameOverMenuView: GameOverMenuView
    + Initialize()
    + ShowMainMenu()
    + ShowGameHUD()
    + ShowPauseMenu()
    + ShowGameOverMenu()
    + UpdateScoreDisplay(score: int)
    + UpdateTimeDisplay(time: float)
    + UpdateGrowthDisplay(growthLevel: int)
  }
  
  class AudioManager {
    - _sfxPool: Dictionary<string, AudioClip>
    - _bgmPool: Dictionary<string, AudioClip>
    + PlaySFX(sfxName: string)
    + PlayBGM(bgmName: string)
    + StopBGM()
    + SetVolume(volume: float)
  }
}

package "Model" {
  class Player {
    - _size: float
    - _speed: float
    - _growthLevel: int
    - _position: Vector3
    - _strikeForce: float
    + Initialize()
    + Move(direction: Vector2)
    + Grow()
    + GetSize(): float
    + GetPosition(): Vector3
    + SetPosition(position: Vector3)
    + Strike(puck: Puck, direction: Vector3)
    + GetStrikeForce(): float
  }

  class Stage {
    - _stageId: int
    - _objectList: List<GameObject>
    - _backgroundPrefab: GameObject
    + Initialize()
    + GetObjectsInStage(): List<GameObject>
  }

  class GameObject {
    - _position: Vector3
    - _size: float
    - _pointValue: int
    - _destroyed: bool
    + Initialize()
    + Hit(force: float)
    + Destroy()
    + IsDestroyed(): bool
    + GetPointValue(): int
  }

  class ObjectPool {
    - _pooledObjects: Dictionary<string, List<GameObject>>
    + GetObject(objectType: string): GameObject
    + ReturnObject(objectType: string, obj: GameObject)
    + ExpandPool(objectType: string, count: int)
  }

  class Puck {
    - _position: Vector3
    - _velocity: Vector3
    - _mass: float
    - _radius: float
    - _isMoving: bool
    - _frictionCoefficient: float
    + Initialize()
    + ApplyForce(force: Vector3)
    + Move()
    + GetPosition(): Vector3
    + SetPosition(position: Vector3)
    + GetVelocity(): Vector3
    + IsMoving(): bool
    + CheckCollision(gameObject: GameObject): bool
    + HandleCollision(gameObject: GameObject)
    + ApplyFriction()
    + Reset()
  }
}

package "View" {
  class PlayerView {
    - _playerModel: Player
    - _sprite: SpriteRenderer
    - _animator: Animator
    - _playerObject: GameObject  ' 3D プレイヤーオブジェクト
    + Initialize(player: Player)
    + UpdateVisuals()
    + PlayAnimation(animName: string)
    + MovePlayer(position: Vector3) ' プレイヤーを移動させる
  }

  class GameObjectView {
    - _gameObjectModel: GameObject
    - _sprite: SpriteRenderer
    - _animator: Animator
    - _particleSystem: ParticleSystem
    + Initialize(gameObject: GameObject)
    + UpdateVisuals()
    + PlayDestroyAnimation()
    + PlayParticleEffect()
  }

  class PuckView {
    - _puckModel: Puck
    - _sprite: SpriteRenderer
    - _trailRenderer: TrailRenderer
    - _puckObject: GameObject
    + Initialize(puck: Puck)
    + UpdateVisuals()
    + PlayHitEffect()
    + PlayTrailEffect(enabled: bool)
    + MovePuck(position: Vector3)
  }

  class GameHUDView {
    - _scoreText: Text
    - _timeText: Text
    - _growthIndicator: Image
    + UpdateScore(score: int)
    + UpdateTime(time: float)
    + UpdateGrowthLevel(level: int)
  }

  class MainMenuView {
    + OnStartButtonClicked()
    + OnExitButtonClicked()
  }

  class PauseMenuView {
    + OnResumeButtonClicked()
    + OnRestartButtonClicked()
    + OnMainMenuButtonClicked()
  }

  class GameOverMenuView {
    - _finalScoreText: Text
    + DisplayFinalScore(score: int)
    + OnRestartButtonClicked()
    + OnMainMenuButtonClicked()
  }

  class StageView {
    - _stageModel: Stage
    - _stageObject: GameObject  ' 3D ステージオブジェクト
    + Initialize(stage: Stage)
    + DisplayStage()  ' ステージを表示する
  }

  class CameraController {
    - _target: Transform
    - _defaultZoom: float
    - _currentZoom: float
    + Follow(target: Transform)
    + Zoom(zoomLevel: float)
    + ResetZoom()
  }
}

package "Controller" {
  class InputController {
    - _inputActions: InputActions
    + Initialize()
    + GetMovementInput(): Vector2
    + IsActionButtonPressed(): bool
    + IsPauseButtonPressed(): bool
    + Enable()
    + Disable()
    + GetStrikeInput(): Vector3
  }

  class PlayerController {
    - _player: Player
    - _playerView: PlayerView
    - _inputController: InputController
    + Initialize(player: Player, playerView: PlayerView)
    + ProcessInput()
    + UpdatePlayerAndView()
    + HandleStrike()
  }

  class PuckController {
    - _puck: Puck
    - _puckView: PuckView
    + Initialize(puck: Puck, puckView: PuckView)
    + UpdatePuckPhysics()
    + CheckCollisions(gameObjects: List<GameObject>)
    + HandleWallCollisions()
    + ResetPuck(position: Vector3)
  }

  class CollisionController {
    + CheckCollisions(player: Player, gameObjects: List<GameObject>): GameObject
    + HandleCollision(player: Player, gameObject: GameObject): int
  }

  class MouseInputController {
    + GetMousePosition(): Vector3  ' マウスの位置を取得する
  }
}

' Core relationships
GameManager --> StageManager
GameManager --> PlayerManager
GameManager --> UIManager
GameManager --> ScoreManager
GameManager --> TimeManager
GameManager --> AudioManager
GameManager --> PuckController

' Model relationships
PlayerManager --> Player
StageManager --> Stage
StageManager --> ObjectPool
Stage --> GameObject
Player --> Puck
Puck --> GameObject

' View relationships
PlayerManager --> PlayerView
UIManager --> GameHUDView
UIManager --> MainMenuView
UIManager --> PauseMenuView
UIManager --> GameOverMenuView
StageManager --> StageView
PuckController --> PuckView

' Controller relationships
PlayerManager --> PlayerController
PlayerController --> InputController
PlayerController --> CollisionController
PlayerController --> MouseInputController
PuckController --> Puck
PuckController --> CollisionController

' Model-View relationships
PlayerView --> Player
GameObjectView --> GameObject
StageView --> Stage
PuckView --> Puck

@enduml