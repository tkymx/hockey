@startuml core_gameplay_class_diagram

' Core Layer (Domain)
package "Domain" {
    interface "IGameUseCase" {
        + StartGame()
        + PauseGame()
        + ResumeGame()
        + EndGame()
    }

    interface "IPuckUseCase" {
        + Move(direction: Vector2, force: float)
        + Grow()
        + CheckCollision(collision: Collision)
    }

    interface "IScoreUseCase" {
        + AddScore(points: int)
        + UpdateCombo()
        + ResetCombo()
    }

    class "GameModel" {
        - gameState: GameState
        - timer: float
        - currentScore: int
        - comboCount: int
        + UpdateState(state: GameState)
        + UpdateTimer(time: float)
        + UpdateScore(score: int)
    }

    class "PuckModel" {
        - position: Vector2
        - size: float
        - speed: float
        - growthLevel: int
        + UpdatePosition(pos: Vector2)
        + UpdateSize(newSize: float)
        + UpdateGrowthLevel(level: int)
    }

    class "DestructibleObjectModel" {
        - size: float
        - durability: float
        - pointValue: int
        - position: Vector2
        + TakeDamage(damage: float)
        + GetPointValue(): int
        + Move(position: Vector2)
    }
}

' Application Layer
package "Application" {
    class "GameUseCase" {
        - gameModel: GameModel
        + Execute()
        + StartGame()
        + PauseGame()
        + EndGame()
        # ValidateGameState()
    }

    class "PuckUseCase" {
        - puckModel: PuckModel
        - scoreUseCase: IScoreUseCase
        + Move(direction: Vector2, force: float)
        + Grow()
        + HandleCollision(collision: Collision)
        # CalculateGrowthProgress()
    }

    class "ScoreUseCase" {
        - gameModel: GameModel
        + AddScore(points: int)
        + UpdateCombo()
        + ResetCombo()
        # CalculateComboBonus()
    }

    class "DestructibleObjectUseCase" {
        - destructibleObjectModel: DestructibleObjectModel
        + Move(position: Vector2)
        + TakeDamage(damage: float)
        + HandleCollision(collision: Collision)
    }
}

' Presentation Layer
package "Presentation" {
    class "GamePresenter" {
        - gameUseCase: IGameUseCase
        - gameViewModel: GameViewModel
        - gameView: IGameView
        + HandleGameStart()
        + HandleGamePause()
        + UpdateGameState()
    }

    class "PuckPresenter" {
        - puckUseCase: IPuckUseCase
        - puckViewModel: PuckViewModel
        - puckView: IPuckView
        + HandleInput(input: InputData)
        + UpdatePuckState()
    }

    class "GameViewModel" {
        - gameState: GameState
        - score: int
        - timer: float
        + UpdateDisplayData()
    }

    class "PuckViewModel" {
        - position: Vector2
        - size: float
        - growthLevel: int
        + UpdateDisplayData()
    }

    class "DestructibleObjectPresenter" {
        - objectUseCase: DestructibleObjectUseCase
        - objectViewModel: DestructibleObjectViewModel
        - objectView: IDestructibleObjectView
        + Initialize(position: Vector2, type: ObjectType)
        + HandleCollision(collision: Collision)
        + UpdateObjectState()
    }

    class "DestructibleObjectViewModel" {
        - position: Vector2
        - size: float
        - state: DestructibleObjectState
        + UpdateDisplayData()
    }
}

' UI Layer
package "Unity UI Layer" {
    interface "IGameView" {
        + Initialize()
        + UpdateUI()
        + ShowGameOver()
    }

    interface "IPuckView" {
        + Initialize()
        + UpdatePosition()
        + UpdateSize()
        + PlayEffects()
    }

    interface "IDestructibleObjectView" {
        + Initialize(type: ObjectType)
        + UpdateVisualState(state: DestructibleObjectState)
        + PlayDestructionEffect()
    }

    class "GameView" {
        - gameViewModel: GameViewModel
        + Initialize()
        + UpdateUI()
        + ShowGameOver()
        # RenderUnityUI()
    }

    class "PuckView" {
        - puckViewModel: PuckViewModel
        - effectManager: EffectManager
        + Initialize()
        + UpdatePosition()
        + UpdateSize()
        + PlayEffects()
    }

    class "DestructibleObjectView" {
        - objectViewModel: DestructibleObjectViewModel
        - meshRenderer: MeshRenderer
        - collider: Collider
        - effectManager: EffectManager
        + Initialize(type: ObjectType)
        + UpdateVisualState(state: DestructibleObjectState)
        + PlayDestructionEffect()
        # UpdateCollider()
    }
}

' Infrastructure Layer
package "Infrastructure" {
    class "GameInstaller" {
        + InstallBindings()
        - BindUseCases()
        - BindPresenters()
        - BindViews()
    }

    class "UnityInputSystem" {
        + GetTouchPosition(): Vector2
        + GetDragDirection(): Vector2
        + IsUITouched(): bool
    }

    class "EffectManager" {
        + PlayEffect(type: EffectType, position: Vector3)
        + PlayDestructionEffect(position: Vector3)
    }

    class "SoundManager" {
        + PlaySound(type: SoundType)
        + PlaySoundAtPosition(type: SoundType, position: Vector3)
    }

    class "ObjectPoolManager" {
        - pools: Dictionary<ObjectType, ObjectPool>
        + GetObject(type: ObjectType): DestructibleObjectView
        + ReturnObject(obj: DestructibleObjectView)
        - CreatePool(type: ObjectType)
    }
}

' Dependencies
GameUseCase --|> IGameUseCase
PuckUseCase --|> IPuckUseCase
ScoreUseCase --|> IScoreUseCase

GamePresenter --> IGameUseCase
GamePresenter --> GameViewModel
GamePresenter --> IGameView

PuckPresenter --> IPuckUseCase
PuckPresenter --> PuckViewModel
PuckPresenter --> IPuckView

DestructibleObjectPresenter --> DestructibleObjectUseCase
DestructibleObjectPresenter --> DestructibleObjectViewModel
DestructibleObjectPresenter --> IDestructibleObjectView

GameView --|> IGameView
PuckView --|> IPuckView
DestructibleObjectView --|> IDestructibleObjectView

GameView --> GameViewModel
PuckView --> PuckViewModel
DestructibleObjectView --> DestructibleObjectViewModel

GameInstaller --> GameUseCase
GameInstaller --> PuckUseCase
GameInstaller --> ScoreUseCase
GameInstaller --> GamePresenter
GameInstaller --> PuckPresenter
GameInstaller --> DestructibleObjectPresenter
GameInstaller --> GameView
GameInstaller --> PuckView
GameInstaller --> DestructibleObjectView

ObjectPoolManager --> DestructibleObjectView

@enduml